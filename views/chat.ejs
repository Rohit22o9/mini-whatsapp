<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with <%= otherUser.username %> | ModernChat</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/style.css">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#eff6ff', 100: '#dbeafe',
                            500: '#3b82f6', 600: '#2563eb',
                            700: '#1d4ed8', 800: '#1e40af', 900: '#1e3a8a',
                        },
                        secondary: {
                            50: '#f8fafc', 100: '#f1f5f9',
                            500: '#64748b', 600: '#475569',
                            700: '#334155', 800: '#1e293b', 900: '#0f172a',
                        }
                    }
                }
            }
        }
    </script>
</head>
<body class="h-screen bg-gradient-to-br from-secondary-50 via-white to-primary-50 overflow-hidden">
    <div class="h-full flex flex-col">
        <!-- Header -->
        <header class="bg-white/90 backdrop-blur-lg border-b border-secondary-200 px-4 py-3 flex-shrink-0">
            <div class="flex items-center space-x-4">
                <form action="/dashboard" method="GET" class="inline">
                    <button type="submit" class="p-2 rounded-lg hover:bg-secondary-100 transition-colors duration-200">
                        <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                    </button>
                </form>
                <div class="flex items-center space-x-3">
                    <img src="/avatars/<%= otherUser.avatar || 'default-avatar.png' %>" 
                        alt="<%= otherUser.username %>" 
                        class="w-10 h-10 rounded-full object-cover border-2 border-white shadow-md">
                    <div>
                        <h1 class="text-lg font-semibold text-secondary-900"><%= otherUser.username %></h1>
                        <p id="user-status" class="text-xs font-medium <%= otherUser.online ? 'text-green-600' : 'text-gray-500' %>">
                            <%= otherUser.online ? 'Online' : 'Offline' %>
                        </p>
                    </div>
                </div>
            </div>
        </header>

        <!-- Chat Messages -->
        <main class="flex-1 overflow-y-auto p-4 space-y-4" id="chatBox">
            <% chats.forEach(chat => { %>
                <div class="flex <%= chat.from.toString() === currentUser._id.toString() ? 'justify-end' : 'justify-start' %>" data-id="<%= chat._id %>">
                    <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl 
                                <%= chat.from.toString() === currentUser._id.toString() 
                                    ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md' 
                                    : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20' %> shadow-lg">
                        <% if (chat.media) { %>
                            <div class="mb-2">
                                <img src="<%= chat.media.startsWith('/') ? chat.media : '/'+chat.media %>" alt="Media" class="rounded-md max-h-60">
                            </div>
                        <% } %>
                        <% if (chat.msg) { %>
                            <p class="text-sm leading-relaxed"><%= chat.msg %></p>
                        <% } %>
                        <div class="flex items-center justify-between mt-2">
                            <span class="text-xs <%= chat.from.toString() === currentUser._id.toString() ? 'text-primary-100' : 'text-secondary-500' %>">
                                <%= new Date(chat.created_at).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                            </span>
                        </div>
                    </div>
                </div>
            <% }) %>
        </main>

        <!-- Media Preview -->
        <div id="mediaPreview" class="hidden flex items-center space-x-2 p-2 bg-gray-100 rounded-md mx-4 mb-2">
            <img id="previewImage" src="" class="h-16 rounded-md object-cover" />
            <button id="removePreview" type="button" class="text-red-500 font-bold text-lg">&times;</button>
        </div>

        <!-- Message Input -->
        <footer class="bg-white/90 backdrop-blur-lg border-t border-secondary-200 p-4 flex-shrink-0">
            <form id="chatForm" enctype="multipart/form-data" class="flex items-center space-x-3">
                <input type="file" name="media" accept="image/*" class="hidden" id="mediaInput">
                <label for="mediaInput" class="cursor-pointer p-3 rounded-xl bg-secondary-100 hover:bg-secondary-200 transition">
                    <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
                    </svg>
                </label>
                <div class="flex-1 relative">
                    <input type="text" name="msg" placeholder="Type your message..." class="w-full px-4 py-3 bg-secondary-50 border border-secondary-200 rounded-2xl focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200 pr-12" autocomplete="off">
                </div>
                <button type="submit" class="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white rounded-2xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl">
                    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                    </svg>
                </button>
            </form>
        </footer>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const currentUserId = "<%= currentUser._id %>";
        const otherUserId = "<%= otherUser._id %>";
        const roomId = [currentUserId, otherUserId].sort().join('_');
        const chatBox = document.getElementById('chatBox');
        const form = document.getElementById('chatForm');
        const msgInput = form.querySelector('input[name="msg"]');
        const mediaInput = document.getElementById('mediaInput');
        const statusElem = document.getElementById('user-status');

        const mediaPreview = document.getElementById('mediaPreview');
        const previewImage = document.getElementById('previewImage');
        const removePreview = document.getElementById('removePreview');

        socket.emit('userOnline', currentUserId);
        socket.emit('joinRoom', roomId);
        socket.emit('messages seen', { from: otherUserId, to: currentUserId });

        function scrollToBottom() { chatBox.scrollTop = chatBox.scrollHeight; }
        scrollToBottom();

        // Media preview handler
        mediaInput.addEventListener('change', () => {
            const file = mediaInput.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    previewImage.src = e.target.result;
                    mediaPreview.classList.remove('hidden');
                };
                reader.readAsDataURL(file);
            } else {
                mediaPreview.classList.add('hidden');
                previewImage.src = '';
            }
        });

        removePreview.addEventListener('click', () => {
            mediaInput.value = '';
            mediaPreview.classList.add('hidden');
            previewImage.src = '';
        });

        // Send message
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const msg = msgInput.value.trim();
            const file = mediaInput.files[0];
            if (!msg && !file) return;

            const formData = new FormData();
            formData.append('msg', msg);
            if (file) formData.append('media', file);

            const res = await fetch(`/chat/${otherUserId}`, { method: 'POST', body: formData });
            const data = await res.json();
            msgInput.value = '';
            mediaInput.value = '';
            mediaPreview.classList.add('hidden');
            previewImage.src = '';
        });

        // Receive message
        socket.on('chat message', (data) => {
            const isCurrentUser = data.from === currentUserId;
            const bubbleClass = isCurrentUser 
                ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md' 
                : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20';

            const msgHTML = `
                <div class="flex ${isCurrentUser ? 'justify-end' : 'justify-start'}" data-id="${data._id}">
                    <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${bubbleClass} shadow-lg">
                        ${data.media ? `<div class="mb-2"><img src="${data.media}" class="rounded-md max-h-60"></div>` : ''}
                        ${data.msg ? `<p class="text-sm leading-relaxed">${data.msg}</p>` : ''}
                        <div class="flex items-center justify-between mt-2">
                            <span class="text-xs ${isCurrentUser ? 'text-primary-100' : 'text-secondary-500'}">
                                ${new Date().toLocaleTimeString('en-US',{hour:'2-digit',minute:'2-digit'})}
                            </span>
                        </div>
                    </div>
                </div>
            `;
            chatBox.insertAdjacentHTML('beforeend', msgHTML);
            scrollToBottom();
        });

        // User status
        socket.on('userStatus', ({ userId, online }) => {
            if(userId === otherUserId) {
                statusElem.textContent = online ? 'Online' : 'Offline';
                statusElem.className = `text-xs font-medium ${online ? 'text-green-600' : 'text-gray-500'}`;
            }
        });
    </script>
</body>
</html>
